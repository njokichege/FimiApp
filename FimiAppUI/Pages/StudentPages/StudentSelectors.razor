
@inject ISessionYearData _isessionDb;

@if (!SessionList.Any())
{
    @SessionContent
}
else
{
    <label>View Students</label>
    <MudCard>
        <MudForm onchange="HandleFormInput">
            <MudCardContent>
                <MudSelect T="double" Label="Session Year" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (SessionYearModel sessionYear in SessionList)
                    {
                        <MudSelectItem T="string" Value="sessionYear.SessionYear" />
                    }
                </MudSelect>
            </MudCardContent>
        </MudForm>
    </MudCard>
}

@code
{
    [Parameter] public EventCallback<SessionYearModel> OnSessionChanged { get; set; }
    [Parameter] public IEnumerable<SessionYearModel> SessionList { get; set; } = Enumerable.Empty<SessionYearModel>();
    [Parameter] public RenderFragment SessionContent { get; set; }

    /// <summary>
    /// This transforms the ChangeEventArgs into a StudentModel
    /// </summary>
    private async Task HandleStudentChanged(ChangeEventArgs args)
    {
        if (OnSessionChanged.HasDelegate)
        {
            if (args is not null)
            {
                var selectedStudent = SessionList.FirstOrDefault(a => a.SessionYear.Equals(args.ToString()));

                if (selectedStudent is not null)
                    await OnSessionChanged.InvokeAsync(selectedStudent);
            }
        }
    }
}
